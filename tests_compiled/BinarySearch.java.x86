MainClass_BinarySearch
Method_main
	MOV Mem->a INPUT ARGS
CONSTRUCT BS
	MOV PRINTOUT %ax
	RETQ
Class_BS
Method_Start
	CALLQ Method_Init
	MOV Mem->aux01 %ax
	CALLQ Method_Print
	MOV Mem->aux02 %ax
	CALLQ Method_Search
	CMPQ %ax 1
	JMP if_0_true
	MOV %ax 0
	MOV PRINTOUT %ax
	JMP if_0_end
if_0_true
	MOV %ax 1
	MOV PRINTOUT %ax
if_0_end
	CALLQ Method_Search
	CMPQ %ax 1
	JMP if_1_true
	MOV %ax 0
	MOV PRINTOUT %ax
	JMP if_1_end
if_1_true
	MOV %ax 1
	MOV PRINTOUT %ax
if_1_end
	CALLQ Method_Search
	CMPQ %ax 1
	JMP if_2_true
	MOV %ax 0
	MOV PRINTOUT %ax
	JMP if_2_end
if_2_true
	MOV %ax 1
	MOV PRINTOUT %ax
if_2_end
	CALLQ Method_Search
	CMPQ %ax 1
	JMP if_3_true
	MOV %ax 0
	MOV PRINTOUT %ax
	JMP if_3_end
if_3_true
	MOV %ax 1
	MOV PRINTOUT %ax
if_3_end
	CALLQ Method_Search
	CMPQ %ax 1
	JMP if_4_true
	MOV %ax 0
	MOV PRINTOUT %ax
	JMP if_4_end
if_4_true
	MOV %ax 1
	MOV PRINTOUT %ax
if_4_end
	CALLQ Method_Search
	CMPQ %ax 1
	JMP if_5_true
	MOV %ax 0
	MOV PRINTOUT %ax
	JMP if_5_end
if_5_true
	MOV %ax 1
	MOV PRINTOUT %ax
if_5_end
	CALLQ Method_Search
	CMPQ %ax 1
	JMP if_6_true
	MOV %ax 0
	MOV PRINTOUT %ax
	JMP if_6_end
if_6_true
	MOV %ax 1
	MOV PRINTOUT %ax
if_6_end
	CALLQ Method_Search
	CMPQ %ax 1
	JMP if_7_true
	MOV %ax 0
	MOV PRINTOUT %ax
	JMP if_7_end
if_7_true
	MOV %ax 1
	MOV PRINTOUT %ax
if_7_end
	RETQ
Method_Search
	MOV %ax 0
	MOV Mem->aux01 %ax
	MOV Mem->bs01 %ax
	MOV Mem->right %ax
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->right
	SUB %ax %dx
	MOV Mem->right %ax
	MOV %ax 0
	MOV Mem->left %ax
	MOV Mem->var_cont %ax
while_8_start
	MOV %ax Mem->var_cont
	CMPQ %ax 1
	JMP while_8_true
	JMP while_8_end
while_8_true
	MOV %ax Mem->right
	MOV %dx %ax
	MOV %ax Mem->left
	ADD %ax %dx
	MOV Mem->medium %ax
	CALLQ Method_Div
	MOV Mem->medium %ax
	MOV %ax Mem->medium
	MOV %ax Mem->number[%ax]
	MOV Mem->aux01 %ax
	MOV %ax Mem->aux01
	MOV %dx %ax
	MOV %ax Mem->num
	CMPQ %ax %dx
	JL if_9_true
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->medium
	ADD %ax %dx
	MOV Mem->left %ax
	JMP if_9_end
if_9_true
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->medium
	SUB %ax %dx
	MOV Mem->right %ax
if_9_end
	CALLQ Method_Compare
	CMPQ %ax 1
	JMP if_10_true
	MOV Mem->var_cont %ax
	JMP if_10_end
if_10_true
	MOV Mem->var_cont %ax
if_10_end
	MOV %ax Mem->left
	MOV %dx %ax
	MOV %ax Mem->right
	CMPQ %ax %dx
	JL if_11_true
	MOV %ax 0
	MOV Mem->nt %ax
	JMP if_11_end
if_11_true
	MOV Mem->var_cont %ax
if_11_end
while_8_start
while_8_end
	CALLQ Method_Compare
	CMPQ %ax 1
	JMP if_12_true
	MOV Mem->bs01 %ax
	JMP if_12_end
if_12_true
	MOV Mem->bs01 %ax
if_12_end
	RETQ
Method_Div
	MOV %ax 0
	MOV Mem->count01 %ax
	MOV %ax 0
	MOV Mem->count02 %ax
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->num
	SUB %ax %dx
	MOV Mem->aux03 %ax
while_13_start
	MOV %ax Mem->aux03
	MOV %dx %ax
	MOV %ax Mem->count02
	CMPQ %ax %dx
	JL while_13_true
	JMP while_13_end
while_13_true
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->count01
	ADD %ax %dx
	MOV Mem->count01 %ax
	MOV %ax 2
	MOV %dx %ax
	MOV %ax Mem->count02
	ADD %ax %dx
	MOV Mem->count02 %ax
while_13_start
while_13_end
	RETQ
Method_Compare
	MOV Mem->retval %ax
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->num2
	ADD %ax %dx
	MOV Mem->aux02 %ax
	MOV %ax Mem->num2
	MOV %dx %ax
	MOV %ax Mem->num1
	CMPQ %ax %dx
	JL if_14_true
	MOV %ax Mem->aux02
	MOV %dx %ax
	MOV %ax Mem->num1
	CMPQ %ax %dx
	NOT %ax
	CMPQ %ax 1
	JMP if_15_true
	MOV Mem->retval %ax
	JMP if_15_end
if_15_true
	MOV Mem->retval %ax
if_15_end
	JMP if_14_end
if_14_true
	MOV Mem->retval %ax
if_14_end
	RETQ
Method_Print
	MOV %ax 1
	MOV Mem->j %ax
while_16_start
	MOV %ax Mem->size
	MOV %dx %ax
	MOV %ax Mem->j
	CMPQ %ax %dx
	JL while_16_true
	JMP while_16_end
while_16_true
	MOV %ax Mem->j
	MOV %ax Mem->number[%ax]
	MOV PRINTOUT %ax
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->j
	ADD %ax %dx
	MOV Mem->j %ax
while_16_start
while_16_end
	MOV %ax 99999
	MOV PRINTOUT %ax
	RETQ
Method_Init
	MOV %ax Mem->sz
	MOV Mem->size %ax
	MOV Mem->number %ax
	MOV %ax 1
	MOV Mem->j %ax
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->size
	ADD %ax %dx
	MOV Mem->k %ax
while_17_start
	MOV %ax Mem->size
	MOV %dx %ax
	MOV %ax Mem->j
	CMPQ %ax %dx
	JL while_17_true
	JMP while_17_end
while_17_true
	MOV %ax Mem->j
	MOV %dx %ax
	MOV %ax 2
	MUL %ax %dx
	MOV Mem->aux01 %ax
	MOV %ax 3
	MOV %dx %ax
	MOV %ax Mem->k
	SUB %ax %dx
	MOV Mem->aux02 %ax
	MOV %ax Mem->j
	MOV %dx %ax
	MOV %ax Mem->aux02
	MOV %dx %ax
	MOV %ax Mem->aux01
	ADD %ax %dx
	MOV Mem->number[%dx] %ax
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->j
	ADD %ax %dx
	MOV Mem->j %ax
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->k
	SUB %ax %dx
	MOV Mem->k %ax
while_17_start
while_17_end
	RETQ
