MainClass_LinearSearch
Method_main
	MOV Mem->a INPUT ARGS
CONSTRUCT LS
	MOV PRINTOUT %ax
	RETQ
Class_LS
Method_Start
	CALLQ Method_Init
	MOV Mem->aux01 %ax
	CALLQ Method_Print
	MOV Mem->aux02 %ax
	MOV %ax 9999
	MOV PRINTOUT %ax
	CALLQ Method_Search
	MOV PRINTOUT %ax
	CALLQ Method_Search
	MOV PRINTOUT %ax
	CALLQ Method_Search
	MOV PRINTOUT %ax
	CALLQ Method_Search
	MOV PRINTOUT %ax
	RETQ
Method_Print
	MOV %ax 1
	MOV Mem->j %ax
while_0_start
	MOV %ax Mem->size
	MOV %dx %ax
	MOV %ax Mem->j
	CMPQ %ax %dx
	JL while_0_true
	JMP while_0_end
while_0_true
	MOV %ax Mem->j
	MOV %ax Mem->number[%ax]
	MOV PRINTOUT %ax
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->j
	ADD %ax %dx
	MOV Mem->j %ax
while_0_start
while_0_end
	RETQ
Method_Search
	MOV %ax 1
	MOV Mem->j %ax
	MOV Mem->ls01 %ax
	MOV %ax 0
	MOV Mem->ifound %ax
while_1_start
	MOV %ax Mem->size
	MOV %dx %ax
	MOV %ax Mem->j
	CMPQ %ax %dx
	JL while_1_true
	JMP while_1_end
while_1_true
	MOV %ax Mem->j
	MOV %ax Mem->number[%ax]
	MOV Mem->aux01 %ax
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->num
	ADD %ax %dx
	MOV Mem->aux02 %ax
	MOV %ax Mem->num
	MOV %dx %ax
	MOV %ax Mem->aux01
	CMPQ %ax %dx
	JL if_2_true
	MOV %ax Mem->aux02
	MOV %dx %ax
	MOV %ax Mem->aux01
	CMPQ %ax %dx
	NOT %ax
	CMPQ %ax 1
	JMP if_3_true
	MOV Mem->ls01 %ax
	MOV %ax 1
	MOV Mem->ifound %ax
	MOV %ax Mem->size
	MOV Mem->j %ax
	JMP if_3_end
if_3_true
	MOV %ax 0
	MOV Mem->nt %ax
if_3_end
	JMP if_2_end
if_2_true
	MOV %ax 0
	MOV Mem->nt %ax
if_2_end
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->j
	ADD %ax %dx
	MOV Mem->j %ax
while_1_start
while_1_end
	RETQ
Method_Init
	MOV %ax Mem->sz
	MOV Mem->size %ax
	MOV Mem->number %ax
	MOV %ax 1
	MOV Mem->j %ax
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->size
	ADD %ax %dx
	MOV Mem->k %ax
while_4_start
	MOV %ax Mem->size
	MOV %dx %ax
	MOV %ax Mem->j
	CMPQ %ax %dx
	JL while_4_true
	JMP while_4_end
while_4_true
	MOV %ax Mem->j
	MOV %dx %ax
	MOV %ax 2
	MUL %ax %dx
	MOV Mem->aux01 %ax
	MOV %ax 3
	MOV %dx %ax
	MOV %ax Mem->k
	SUB %ax %dx
	MOV Mem->aux02 %ax
	MOV %ax Mem->j
	MOV %dx %ax
	MOV %ax Mem->aux02
	MOV %dx %ax
	MOV %ax Mem->aux01
	ADD %ax %dx
	MOV Mem->number[%dx] %ax
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->j
	ADD %ax %dx
	MOV Mem->j %ax
	MOV %ax 1
	MOV %dx %ax
	MOV %ax Mem->k
	SUB %ax %dx
	MOV Mem->k %ax
while_4_start
while_4_end
	RETQ
