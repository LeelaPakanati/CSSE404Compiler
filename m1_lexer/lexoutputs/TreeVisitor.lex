ReserveWord, class
ID, TreeVisitor
Delimiter, {
ReserveWord, public
ReserveWord, static
ReserveWord, void
ReserveWord, main
Delimiter, (
ReserveWord, String
Delimiter, [
Delimiter, ]
ID, a
Delimiter, )
Delimiter, {
ReserveWord, System.out.println
Delimiter, (
ReserveWord, new
ID, TV
Delimiter, (
Delimiter, )
Delimiter, .
ID, Start
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, ;
Delimiter, }
Delimiter, }
ReserveWord, class
ID, TV
Delimiter, {
ReserveWord, public
ReserveWord, int
ID, Start
Delimiter, (
Delimiter, )
Delimiter, {
ID, Tree
ID, root
Delimiter, ;
ReserveWord, boolean
ID, ntb
Delimiter, ;
ReserveWord, int
ID, nti
Delimiter, ;
ID, MyVisitor
ID, v
Delimiter, ;
ID, root
Delimiter, =
ReserveWord, new
ID, Tree
Delimiter, (
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, root
Delimiter, .
ID, Init
Delimiter, (
Integer, 16
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, root
Delimiter, .
ID, Print
Delimiter, (
Delimiter, )
Delimiter, ;
ReserveWord, System.out.println
Delimiter, (
Integer, 100000000
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, root
Delimiter, .
ID, Insert
Delimiter, (
Integer, 8
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, root
Delimiter, .
ID, Insert
Delimiter, (
Integer, 24
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, root
Delimiter, .
ID, Insert
Delimiter, (
Integer, 4
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, root
Delimiter, .
ID, Insert
Delimiter, (
Integer, 12
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, root
Delimiter, .
ID, Insert
Delimiter, (
Integer, 20
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, root
Delimiter, .
ID, Insert
Delimiter, (
Integer, 28
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, root
Delimiter, .
ID, Insert
Delimiter, (
Integer, 14
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, root
Delimiter, .
ID, Print
Delimiter, (
Delimiter, )
Delimiter, ;
ReserveWord, System.out.println
Delimiter, (
Integer, 100000000
Delimiter, )
Delimiter, ;
ID, v
Delimiter, =
ReserveWord, new
ID, MyVisitor
Delimiter, (
Delimiter, )
Delimiter, ;
ReserveWord, System.out.println
Delimiter, (
Integer, 50000000
Delimiter, )
Delimiter, ;
ID, nti
Delimiter, =
ID, root
Delimiter, .
ID, accept
Delimiter, (
ID, v
Delimiter, )
Delimiter, ;
ReserveWord, System.out.println
Delimiter, (
Integer, 100000000
Delimiter, )
Delimiter, ;
ReserveWord, System.out.println
Delimiter, (
ID, root
Delimiter, .
ID, Search
Delimiter, (
Integer, 24
Delimiter, )
Delimiter, )
Delimiter, ;
ReserveWord, System.out.println
Delimiter, (
ID, root
Delimiter, .
ID, Search
Delimiter, (
Integer, 12
Delimiter, )
Delimiter, )
Delimiter, ;
ReserveWord, System.out.println
Delimiter, (
ID, root
Delimiter, .
ID, Search
Delimiter, (
Integer, 16
Delimiter, )
Delimiter, )
Delimiter, ;
ReserveWord, System.out.println
Delimiter, (
ID, root
Delimiter, .
ID, Search
Delimiter, (
Integer, 50
Delimiter, )
Delimiter, )
Delimiter, ;
ReserveWord, System.out.println
Delimiter, (
ID, root
Delimiter, .
ID, Search
Delimiter, (
Integer, 12
Delimiter, )
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, root
Delimiter, .
ID, Delete
Delimiter, (
Integer, 12
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, root
Delimiter, .
ID, Print
Delimiter, (
Delimiter, )
Delimiter, ;
ReserveWord, System.out.println
Delimiter, (
ID, root
Delimiter, .
ID, Search
Delimiter, (
Integer, 12
Delimiter, )
Delimiter, )
Delimiter, ;
ReserveWord, return
Integer, 0
Delimiter, ;
Delimiter, }
Delimiter, }
ReserveWord, class
ID, Tree
Delimiter, {
ID, Tree
ID, left
Delimiter, ;
ID, Tree
ID, right
Delimiter, ;
ReserveWord, int
ID, key
Delimiter, ;
ReserveWord, boolean
ID, has_left
Delimiter, ;
ReserveWord, boolean
ID, has_right
Delimiter, ;
ID, Tree
ID, my_null
Delimiter, ;
ReserveWord, public
ReserveWord, boolean
ID, Init
Delimiter, (
ReserveWord, int
ID, v_key
Delimiter, )
Delimiter, {
ID, key
Delimiter, =
ID, v_key
Delimiter, ;
ID, has_left
Delimiter, =
ReserveWord, false
Delimiter, ;
ID, has_right
Delimiter, =
ReserveWord, false
Delimiter, ;
ReserveWord, return
ReserveWord, true
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, SetRight
Delimiter, (
ID, Tree
ID, rn
Delimiter, )
Delimiter, {
ID, right
Delimiter, =
ID, rn
Delimiter, ;
ReserveWord, return
ReserveWord, true
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, SetLeft
Delimiter, (
ID, Tree
ID, ln
Delimiter, )
Delimiter, {
ID, left
Delimiter, =
ID, ln
Delimiter, ;
ReserveWord, return
ReserveWord, true
Delimiter, ;
Delimiter, }
ReserveWord, public
ID, Tree
ID, GetRight
Delimiter, (
Delimiter, )
Delimiter, {
ReserveWord, return
ID, right
Delimiter, ;
Delimiter, }
ReserveWord, public
ID, Tree
ID, GetLeft
Delimiter, (
Delimiter, )
Delimiter, {
ReserveWord, return
ID, left
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, int
ID, GetKey
Delimiter, (
Delimiter, )
Delimiter, {
ReserveWord, return
ID, key
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, SetKey
Delimiter, (
ReserveWord, int
ID, v_key
Delimiter, )
Delimiter, {
ID, key
Delimiter, =
ID, v_key
Delimiter, ;
ReserveWord, return
ReserveWord, true
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, GetHas_Right
Delimiter, (
Delimiter, )
Delimiter, {
ReserveWord, return
ID, has_right
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, GetHas_Left
Delimiter, (
Delimiter, )
Delimiter, {
ReserveWord, return
ID, has_left
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, SetHas_Left
Delimiter, (
ReserveWord, boolean
ID, val
Delimiter, )
Delimiter, {
ID, has_left
Delimiter, =
ID, val
Delimiter, ;
ReserveWord, return
ReserveWord, true
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, SetHas_Right
Delimiter, (
ReserveWord, boolean
ID, val
Delimiter, )
Delimiter, {
ID, has_right
Delimiter, =
ID, val
Delimiter, ;
ReserveWord, return
ReserveWord, true
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, Compare
Delimiter, (
ReserveWord, int
ID, num1
Delimiter, ,
ReserveWord, int
ID, num2
Delimiter, )
Delimiter, {
ReserveWord, boolean
ID, ntb
Delimiter, ;
ReserveWord, int
ID, nti
Delimiter, ;
ID, ntb
Delimiter, =
ReserveWord, false
Delimiter, ;
ID, nti
Delimiter, =
ID, num2
Delimiter, +
Integer, 1
Delimiter, ;
ReserveWord, if
Delimiter, (
ID, num1
Delimiter, <
ID, num2
Delimiter, )
ID, ntb
Delimiter, =
ReserveWord, false
Delimiter, ;
ReserveWord, else
ReserveWord, if
Delimiter, (
Delimiter, !
Delimiter, (
ID, num1
Delimiter, <
ID, nti
Delimiter, )
Delimiter, )
ID, ntb
Delimiter, =
ReserveWord, false
Delimiter, ;
ReserveWord, else
ID, ntb
Delimiter, =
ReserveWord, true
Delimiter, ;
ReserveWord, return
ID, ntb
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, Insert
Delimiter, (
ReserveWord, int
ID, v_key
Delimiter, )
Delimiter, {
ID, Tree
ID, new_node
Delimiter, ;
ReserveWord, boolean
ID, ntb
Delimiter, ;
ID, Tree
ID, current_node
Delimiter, ;
ReserveWord, boolean
ID, cont
Delimiter, ;
ReserveWord, int
ID, key_aux
Delimiter, ;
ID, new_node
Delimiter, =
ReserveWord, new
ID, Tree
Delimiter, (
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, new_node
Delimiter, .
ID, Init
Delimiter, (
ID, v_key
Delimiter, )
Delimiter, ;
ID, current_node
Delimiter, =
ReserveWord, this
Delimiter, ;
ID, cont
Delimiter, =
ReserveWord, true
Delimiter, ;
ReserveWord, while
Delimiter, (
ID, cont
Delimiter, )
Delimiter, {
ID, key_aux
Delimiter, =
ID, current_node
Delimiter, .
ID, GetKey
Delimiter, (
Delimiter, )
Delimiter, ;
ReserveWord, if
Delimiter, (
ID, v_key
Delimiter, <
ID, key_aux
Delimiter, )
Delimiter, {
ReserveWord, if
Delimiter, (
ID, current_node
Delimiter, .
ID, GetHas_Left
Delimiter, (
Delimiter, )
Delimiter, )
ID, current_node
Delimiter, =
ID, current_node
Delimiter, .
ID, GetLeft
Delimiter, (
Delimiter, )
Delimiter, ;
ReserveWord, else
Delimiter, {
ID, cont
Delimiter, =
ReserveWord, false
Delimiter, ;
ID, ntb
Delimiter, =
ID, current_node
Delimiter, .
ID, SetHas_Left
Delimiter, (
ReserveWord, true
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, current_node
Delimiter, .
ID, SetLeft
Delimiter, (
ID, new_node
Delimiter, )
Delimiter, ;
Delimiter, }
Delimiter, }
ReserveWord, else
Delimiter, {
ReserveWord, if
Delimiter, (
ID, current_node
Delimiter, .
ID, GetHas_Right
Delimiter, (
Delimiter, )
Delimiter, )
ID, current_node
Delimiter, =
ID, current_node
Delimiter, .
ID, GetRight
Delimiter, (
Delimiter, )
Delimiter, ;
ReserveWord, else
Delimiter, {
ID, cont
Delimiter, =
ReserveWord, false
Delimiter, ;
ID, ntb
Delimiter, =
ID, current_node
Delimiter, .
ID, SetHas_Right
Delimiter, (
ReserveWord, true
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, current_node
Delimiter, .
ID, SetRight
Delimiter, (
ID, new_node
Delimiter, )
Delimiter, ;
Delimiter, }
Delimiter, }
Delimiter, }
ReserveWord, return
ReserveWord, true
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, Delete
Delimiter, (
ReserveWord, int
ID, v_key
Delimiter, )
Delimiter, {
ID, Tree
ID, current_node
Delimiter, ;
ID, Tree
ID, parent_node
Delimiter, ;
ReserveWord, boolean
ID, cont
Delimiter, ;
ReserveWord, boolean
ID, found
Delimiter, ;
ReserveWord, boolean
ID, ntb
Delimiter, ;
ReserveWord, boolean
ID, is_root
Delimiter, ;
ReserveWord, int
ID, key_aux
Delimiter, ;
ID, current_node
Delimiter, =
ReserveWord, this
Delimiter, ;
ID, parent_node
Delimiter, =
ReserveWord, this
Delimiter, ;
ID, cont
Delimiter, =
ReserveWord, true
Delimiter, ;
ID, found
Delimiter, =
ReserveWord, false
Delimiter, ;
ID, is_root
Delimiter, =
ReserveWord, true
Delimiter, ;
ReserveWord, while
Delimiter, (
ID, cont
Delimiter, )
Delimiter, {
ID, key_aux
Delimiter, =
ID, current_node
Delimiter, .
ID, GetKey
Delimiter, (
Delimiter, )
Delimiter, ;
ReserveWord, if
Delimiter, (
ID, v_key
Delimiter, <
ID, key_aux
Delimiter, )
ReserveWord, if
Delimiter, (
ID, current_node
Delimiter, .
ID, GetHas_Left
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, {
ID, parent_node
Delimiter, =
ID, current_node
Delimiter, ;
ID, current_node
Delimiter, =
ID, current_node
Delimiter, .
ID, GetLeft
Delimiter, (
Delimiter, )
Delimiter, ;
Delimiter, }
ReserveWord, else
ID, cont
Delimiter, =
ReserveWord, false
Delimiter, ;
ReserveWord, else
ReserveWord, if
Delimiter, (
ID, key_aux
Delimiter, <
ID, v_key
Delimiter, )
ReserveWord, if
Delimiter, (
ID, current_node
Delimiter, .
ID, GetHas_Right
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, {
ID, parent_node
Delimiter, =
ID, current_node
Delimiter, ;
ID, current_node
Delimiter, =
ID, current_node
Delimiter, .
ID, GetRight
Delimiter, (
Delimiter, )
Delimiter, ;
Delimiter, }
ReserveWord, else
ID, cont
Delimiter, =
ReserveWord, false
Delimiter, ;
ReserveWord, else
Delimiter, {
ReserveWord, if
Delimiter, (
ID, is_root
Delimiter, )
ReserveWord, if
Delimiter, (
Delimiter, !
ID, current_node
Delimiter, .
ID, GetHas_Right
Delimiter, (
Delimiter, )
Delimiter, &&
Delimiter, !
ID, current_node
Delimiter, .
ID, GetHas_Left
Delimiter, (
Delimiter, )
Delimiter, )
ID, ntb
Delimiter, =
ReserveWord, true
Delimiter, ;
ReserveWord, else
ID, ntb
Delimiter, =
ID, this
Delimiter, .
ID, Remove
Delimiter, (
ID, parent_node
Delimiter, ,
ID, current_node
Delimiter, )
Delimiter, ;
ReserveWord, else
ID, ntb
Delimiter, =
ID, this
Delimiter, .
ID, Remove
Delimiter, (
ID, parent_node
Delimiter, ,
ID, current_node
Delimiter, )
Delimiter, ;
ID, found
Delimiter, =
ReserveWord, true
Delimiter, ;
ID, cont
Delimiter, =
ReserveWord, false
Delimiter, ;
Delimiter, }
ID, is_root
Delimiter, =
ReserveWord, false
Delimiter, ;
Delimiter, }
ReserveWord, return
ID, found
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, Remove
Delimiter, (
ID, Tree
ID, p_node
Delimiter, ,
ID, Tree
ID, c_node
Delimiter, )
Delimiter, {
ReserveWord, boolean
ID, ntb
Delimiter, ;
ReserveWord, int
ID, auxkey1
Delimiter, ;
ReserveWord, int
ID, auxkey2
Delimiter, ;
ReserveWord, if
Delimiter, (
ID, c_node
Delimiter, .
ID, GetHas_Left
Delimiter, (
Delimiter, )
Delimiter, )
ID, ntb
Delimiter, =
ID, this
Delimiter, .
ID, RemoveLeft
Delimiter, (
ID, p_node
Delimiter, ,
ID, c_node
Delimiter, )
Delimiter, ;
ReserveWord, else
ReserveWord, if
Delimiter, (
ID, c_node
Delimiter, .
ID, GetHas_Right
Delimiter, (
Delimiter, )
Delimiter, )
ID, ntb
Delimiter, =
ID, this
Delimiter, .
ID, RemoveRight
Delimiter, (
ID, p_node
Delimiter, ,
ID, c_node
Delimiter, )
Delimiter, ;
ReserveWord, else
Delimiter, {
ID, auxkey1
Delimiter, =
ID, c_node
Delimiter, .
ID, GetKey
Delimiter, (
Delimiter, )
Delimiter, ;
ID, auxkey2
Delimiter, =
Delimiter, (
ID, p_node
Delimiter, .
ID, GetLeft
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, .
ID, GetKey
Delimiter, (
Delimiter, )
Delimiter, ;
ReserveWord, if
Delimiter, (
ID, this
Delimiter, .
ID, Compare
Delimiter, (
ID, auxkey1
Delimiter, ,
ID, auxkey2
Delimiter, )
Delimiter, )
Delimiter, {
ID, ntb
Delimiter, =
ID, p_node
Delimiter, .
ID, SetLeft
Delimiter, (
ID, my_null
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, p_node
Delimiter, .
ID, SetHas_Left
Delimiter, (
ReserveWord, false
Delimiter, )
Delimiter, ;
Delimiter, }
ReserveWord, else
Delimiter, {
ID, ntb
Delimiter, =
ID, p_node
Delimiter, .
ID, SetRight
Delimiter, (
ID, my_null
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, p_node
Delimiter, .
ID, SetHas_Right
Delimiter, (
ReserveWord, false
Delimiter, )
Delimiter, ;
Delimiter, }
Delimiter, }
ReserveWord, return
ReserveWord, true
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, RemoveRight
Delimiter, (
ID, Tree
ID, p_node
Delimiter, ,
ID, Tree
ID, c_node
Delimiter, )
Delimiter, {
ReserveWord, boolean
ID, ntb
Delimiter, ;
ReserveWord, while
Delimiter, (
ID, c_node
Delimiter, .
ID, GetHas_Right
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, {
ID, ntb
Delimiter, =
ID, c_node
Delimiter, .
ID, SetKey
Delimiter, (
Delimiter, (
ID, c_node
Delimiter, .
ID, GetRight
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, .
ID, GetKey
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, ;
ID, p_node
Delimiter, =
ID, c_node
Delimiter, ;
ID, c_node
Delimiter, =
ID, c_node
Delimiter, .
ID, GetRight
Delimiter, (
Delimiter, )
Delimiter, ;
Delimiter, }
ID, ntb
Delimiter, =
ID, p_node
Delimiter, .
ID, SetRight
Delimiter, (
ID, my_null
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, p_node
Delimiter, .
ID, SetHas_Right
Delimiter, (
ReserveWord, false
Delimiter, )
Delimiter, ;
ReserveWord, return
ReserveWord, true
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, RemoveLeft
Delimiter, (
ID, Tree
ID, p_node
Delimiter, ,
ID, Tree
ID, c_node
Delimiter, )
Delimiter, {
ReserveWord, boolean
ID, ntb
Delimiter, ;
ReserveWord, while
Delimiter, (
ID, c_node
Delimiter, .
ID, GetHas_Left
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, {
ID, ntb
Delimiter, =
ID, c_node
Delimiter, .
ID, SetKey
Delimiter, (
Delimiter, (
ID, c_node
Delimiter, .
ID, GetLeft
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, .
ID, GetKey
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, ;
ID, p_node
Delimiter, =
ID, c_node
Delimiter, ;
ID, c_node
Delimiter, =
ID, c_node
Delimiter, .
ID, GetLeft
Delimiter, (
Delimiter, )
Delimiter, ;
Delimiter, }
ID, ntb
Delimiter, =
ID, p_node
Delimiter, .
ID, SetLeft
Delimiter, (
ID, my_null
Delimiter, )
Delimiter, ;
ID, ntb
Delimiter, =
ID, p_node
Delimiter, .
ID, SetHas_Left
Delimiter, (
ReserveWord, false
Delimiter, )
Delimiter, ;
ReserveWord, return
ReserveWord, true
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, int
ID, Search
Delimiter, (
ReserveWord, int
ID, v_key
Delimiter, )
Delimiter, {
ID, Tree
ID, current_node
Delimiter, ;
ReserveWord, int
ID, ifound
Delimiter, ;
ReserveWord, boolean
ID, cont
Delimiter, ;
ReserveWord, int
ID, key_aux
Delimiter, ;
ID, current_node
Delimiter, =
ReserveWord, this
Delimiter, ;
ID, cont
Delimiter, =
ReserveWord, true
Delimiter, ;
ID, ifound
Delimiter, =
Integer, 0
Delimiter, ;
ReserveWord, while
Delimiter, (
ID, cont
Delimiter, )
Delimiter, {
ID, key_aux
Delimiter, =
ID, current_node
Delimiter, .
ID, GetKey
Delimiter, (
Delimiter, )
Delimiter, ;
ReserveWord, if
Delimiter, (
ID, v_key
Delimiter, <
ID, key_aux
Delimiter, )
ReserveWord, if
Delimiter, (
ID, current_node
Delimiter, .
ID, GetHas_Left
Delimiter, (
Delimiter, )
Delimiter, )
ID, current_node
Delimiter, =
ID, current_node
Delimiter, .
ID, GetLeft
Delimiter, (
Delimiter, )
Delimiter, ;
ReserveWord, else
ID, cont
Delimiter, =
ReserveWord, false
Delimiter, ;
ReserveWord, else
ReserveWord, if
Delimiter, (
ID, key_aux
Delimiter, <
ID, v_key
Delimiter, )
ReserveWord, if
Delimiter, (
ID, current_node
Delimiter, .
ID, GetHas_Right
Delimiter, (
Delimiter, )
Delimiter, )
ID, current_node
Delimiter, =
ID, current_node
Delimiter, .
ID, GetRight
Delimiter, (
Delimiter, )
Delimiter, ;
ReserveWord, else
ID, cont
Delimiter, =
ReserveWord, false
Delimiter, ;
ReserveWord, else
Delimiter, {
ID, ifound
Delimiter, =
Integer, 1
Delimiter, ;
ID, cont
Delimiter, =
ReserveWord, false
Delimiter, ;
Delimiter, }
Delimiter, }
ReserveWord, return
ID, ifound
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, Print
Delimiter, (
Delimiter, )
Delimiter, {
ReserveWord, boolean
ID, ntb
Delimiter, ;
ID, Tree
ID, current_node
Delimiter, ;
ID, current_node
Delimiter, =
ReserveWord, this
Delimiter, ;
ID, ntb
Delimiter, =
ID, this
Delimiter, .
ID, RecPrint
Delimiter, (
ID, current_node
Delimiter, )
Delimiter, ;
ReserveWord, return
ReserveWord, true
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, boolean
ID, RecPrint
Delimiter, (
ID, Tree
ID, node
Delimiter, )
Delimiter, {
ReserveWord, boolean
ID, ntb
Delimiter, ;
ReserveWord, if
Delimiter, (
ID, node
Delimiter, .
ID, GetHas_Left
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, {
ID, ntb
Delimiter, =
ID, this
Delimiter, .
ID, RecPrint
Delimiter, (
ID, node
Delimiter, .
ID, GetLeft
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, ;
Delimiter, }
ReserveWord, else
ID, ntb
Delimiter, =
ReserveWord, true
Delimiter, ;
ReserveWord, System.out.println
Delimiter, (
ID, node
Delimiter, .
ID, GetKey
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, ;
ReserveWord, if
Delimiter, (
ID, node
Delimiter, .
ID, GetHas_Right
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, {
ID, ntb
Delimiter, =
ID, this
Delimiter, .
ID, RecPrint
Delimiter, (
ID, node
Delimiter, .
ID, GetRight
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, ;
Delimiter, }
ReserveWord, else
ID, ntb
Delimiter, =
ReserveWord, true
Delimiter, ;
ReserveWord, return
ReserveWord, true
Delimiter, ;
Delimiter, }
ReserveWord, public
ReserveWord, int
ID, accept
Delimiter, (
ID, Visitor
ID, v
Delimiter, )
Delimiter, {
ReserveWord, int
ID, nti
Delimiter, ;
ReserveWord, System.out.println
Delimiter, (
Integer, 333
Delimiter, )
Delimiter, ;
ID, nti
Delimiter, =
ID, v
Delimiter, .
ID, visit
Delimiter, (
ReserveWord, this
Delimiter, )
Delimiter, ;
ReserveWord, return
Integer, 0
Delimiter, ;
Delimiter, }
Delimiter, }
ReserveWord, class
ID, Visitor
Delimiter, {
ID, Tree
ID, l
Delimiter, ;
ID, Tree
ID, r
Delimiter, ;
ReserveWord, public
ReserveWord, int
ID, visit
Delimiter, (
ID, Tree
ID, n
Delimiter, )
Delimiter, {
ReserveWord, int
ID, nti
Delimiter, ;
ReserveWord, if
Delimiter, (
ID, n
Delimiter, .
ID, GetHas_Right
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, {
ID, r
Delimiter, =
ID, n
Delimiter, .
ID, GetRight
Delimiter, (
Delimiter, )
Delimiter, ;
ID, nti
Delimiter, =
ID, r
Delimiter, .
ID, accept
Delimiter, (
ReserveWord, this
Delimiter, )
Delimiter, ;
Delimiter, }
ReserveWord, else
ID, nti
Delimiter, =
Integer, 0
Delimiter, ;
ReserveWord, if
Delimiter, (
ID, n
Delimiter, .
ID, GetHas_Left
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, {
ID, l
Delimiter, =
ID, n
Delimiter, .
ID, GetLeft
Delimiter, (
Delimiter, )
Delimiter, ;
ID, nti
Delimiter, =
ID, l
Delimiter, .
ID, accept
Delimiter, (
ReserveWord, this
Delimiter, )
Delimiter, ;
Delimiter, }
ReserveWord, else
ID, nti
Delimiter, =
Integer, 0
Delimiter, ;
ReserveWord, return
Integer, 0
Delimiter, ;
Delimiter, }
Delimiter, }
ReserveWord, class
ID, MyVisitor
ReserveWord, extends
ID, Visitor
Delimiter, {
ReserveWord, public
ReserveWord, int
ID, visit
Delimiter, (
ID, Tree
ID, n
Delimiter, )
Delimiter, {
ReserveWord, int
ID, nti
Delimiter, ;
ReserveWord, if
Delimiter, (
ID, n
Delimiter, .
ID, GetHas_Right
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, {
ID, r
Delimiter, =
ID, n
Delimiter, .
ID, GetRight
Delimiter, (
Delimiter, )
Delimiter, ;
ID, nti
Delimiter, =
ID, r
Delimiter, .
ID, accept
Delimiter, (
ReserveWord, this
Delimiter, )
Delimiter, ;
Delimiter, }
ReserveWord, else
ID, nti
Delimiter, =
Integer, 0
Delimiter, ;
ReserveWord, System.out.println
Delimiter, (
ID, n
Delimiter, .
ID, GetKey
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, ;
ReserveWord, if
Delimiter, (
ID, n
Delimiter, .
ID, GetHas_Left
Delimiter, (
Delimiter, )
Delimiter, )
Delimiter, {
ID, l
Delimiter, =
ID, n
Delimiter, .
ID, GetLeft
Delimiter, (
Delimiter, )
Delimiter, ;
ID, nti
Delimiter, =
ID, l
Delimiter, .
ID, accept
Delimiter, (
ReserveWord, this
Delimiter, )
Delimiter, ;
Delimiter, }
ReserveWord, else
ID, nti
Delimiter, =
Integer, 0
Delimiter, ;
ReserveWord, return
Integer, 0
Delimiter, ;
Delimiter, }
Delimiter, }
