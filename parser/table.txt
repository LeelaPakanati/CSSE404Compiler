FIRST	FOLLOW	Nonterminal	class	ID	{	public	static	void	main	(	String	[	]	)	}	extends	;	return	,	int	boolean	if	else	while	System.out.println	=	||	&&	==	!=	<	<=	>=	>	+	-	*	/	new	!	this	Integer	null	true	false	.	length	$
{class}	{$}	Program	Program -> MainClassDecl ClassDeclList																																													
{class}	{$,class}	MainClassDecl	MainClassDecl -> class ID { public static void main ( String [ ] ID ) { StmtList } }																																													
{'',class}	{$}	ClassDeclList	ClassDeclList -> ClassDecl ClassDeclList																																													ClassDeclList -> ''
{class}	{$,class}	ClassDecl	ClassDecl -> class ID ClassDeclPrime { ClassVarDeclList MethodDeclList }																																													
{extends,''}	{{}	ClassDeclPrime			ClassDeclPrime -> ''											ClassDeclPrime -> extends ID																																
{'',int,boolean,ID}	{$,class,public,}}	ClassVarDeclList	ClassVarDeclList -> ''	ClassVarDeclList -> ClassVarDecl ClassVarDeclList		ClassVarDeclList -> ''									ClassVarDeclList -> ''					ClassVarDeclList -> ClassVarDecl ClassVarDeclList	ClassVarDeclList -> ClassVarDecl ClassVarDeclList																											ClassVarDeclList -> ''
{int,boolean,ID}	{$,class,public,},int,boolean,ID}	ClassVarDecl		ClassVarDecl -> Formal ;																ClassVarDecl -> Formal ;	ClassVarDecl -> Formal ;																											
{'',public}	{}}	MethodDeclList				MethodDeclList -> MethodDecl MethodDeclList									MethodDeclList -> ''																																	
{public}	{},public}	MethodDecl				MethodDecl -> public Formal ( FormalList ) { StmtList return Expr ; }																																										
{'',int,boolean,ID}	{)}	FormalList		FormalList -> Formal FormalListPrime										FormalList -> ''						FormalList -> Formal FormalListPrime	FormalList -> Formal FormalListPrime																											
{,,''}	{)}	FormalListPrime												FormalListPrime -> ''					FormalListPrime -> , Formal FormalListPrime																													
{int,boolean,ID}	{;,(,,,)}	Formal		Formal -> Type ID																Formal -> Type ID	Formal -> Type ID																											
{int,boolean,ID}	{ID}	Type		Type -> ID																Type -> int IsArr	Type -> boolean																											
{[,''}	{ID,=,;}	IsArr		IsArr -> ''								IsArr -> [ HasExpr ]					IsArr -> ''									IsArr -> ''																						
{'',new,!,-,(,ID,this,Integer,null,true,false}	{]}	HasExpr		HasExpr -> Expr						HasExpr -> Expr			HasExpr -> ''																							HasExpr -> Expr			HasExpr -> Expr	HasExpr -> Expr	HasExpr -> Expr	HasExpr -> Expr	HasExpr -> Expr	HasExpr -> Expr	HasExpr -> Expr			
{'',if,while,System.out.println,int,boolean,ID}	{},return}	StmtList		StmtList -> Stmt StmtList											StmtList -> ''			StmtList -> ''		StmtList -> Stmt StmtList	StmtList -> Stmt StmtList	StmtList -> Stmt StmtList		StmtList -> Stmt StmtList	StmtList -> Stmt StmtList																							
{if,while,System.out.println,int,boolean,ID}	{},return,if,while,System.out.println,int,boolean,ID,else}	Stmt		Stmt -> AtomicStmt																Stmt -> AtomicStmt	Stmt -> AtomicStmt	Stmt -> if ( Expr ) BracketStmt else BracketStmt		Stmt -> while ( Expr ) BracketStmt	Stmt -> AtomicStmt																							
{{,if,while,System.out.println,int,boolean,ID}	{else,},return,if,while,System.out.println,int,boolean,ID}	BracketStmt		BracketStmt -> Stmt	BracketStmt -> { StmtList }															BracketStmt -> Stmt	BracketStmt -> Stmt	BracketStmt -> Stmt		BracketStmt -> Stmt	BracketStmt -> Stmt																							
{System.out.println,int,boolean,ID}	{},return,if,while,System.out.println,int,boolean,ID,else}	AtomicStmt		AtomicStmt -> ID IsArr IDAssignment																AtomicStmt -> int IsArr ID IsArr Assignment	AtomicStmt -> boolean ID IsArr Assignment				AtomicStmt -> System.out.println ( Expr ) ;																							
{ID,=}	{},return,if,while,System.out.println,int,boolean,ID,else}	IDAssignment		IDAssignment -> ID IsArr Assignment																						IDAssignment -> = Expr ;																						
{=,;}	{},return,if,while,System.out.println,int,boolean,ID,else}	Assignment															Assignment -> ;									Assignment -> = Expr ;																						
{'',new,!,-,(,ID,this,Integer,null,true,false}	{)}	ExprList		ExprList -> Expr ExprListPrime						ExprList -> Expr ExprListPrime				ExprList -> ''																						ExprList -> Expr ExprListPrime			ExprList -> Expr ExprListPrime	ExprList -> Expr ExprListPrime	ExprList -> Expr ExprListPrime	ExprList -> Expr ExprListPrime	ExprList -> Expr ExprListPrime	ExprList -> Expr ExprListPrime	ExprList -> Expr ExprListPrime			
{,,''}	{)}	ExprListPrime												ExprListPrime -> ''					ExprListPrime -> , Expr ExprListPrime																													
{new,!,-,(,ID,this,Integer,null,true,false}	{;,],),,}	Expr		Expr -> OrOperand ExprPrime						Expr -> OrOperand ExprPrime																										Expr -> OrOperand ExprPrime			Expr -> OrOperand ExprPrime	Expr -> OrOperand ExprPrime	Expr -> OrOperand ExprPrime	Expr -> OrOperand ExprPrime	Expr -> OrOperand ExprPrime	Expr -> OrOperand ExprPrime	Expr -> OrOperand ExprPrime			
{||,''}	{;,],),,}	ExprPrime											ExprPrime -> ''	ExprPrime -> ''			ExprPrime -> ''		ExprPrime -> ''								ExprPrime -> || OrOperand ExprPrime																					
{new,!,-,(,ID,this,Integer,null,true,false}	{||,;,],),,}	OrOperand		OrOperand -> AndOperand OrOperandPrime						OrOperand -> AndOperand OrOperandPrime																										OrOperand -> AndOperand OrOperandPrime			OrOperand -> AndOperand OrOperandPrime	OrOperand -> AndOperand OrOperandPrime	OrOperand -> AndOperand OrOperandPrime	OrOperand -> AndOperand OrOperandPrime	OrOperand -> AndOperand OrOperandPrime	OrOperand -> AndOperand OrOperandPrime	OrOperand -> AndOperand OrOperandPrime			
{&&,''}	{||,;,],),,}	OrOperandPrime											OrOperandPrime -> ''	OrOperandPrime -> ''			OrOperandPrime -> ''		OrOperandPrime -> ''								OrOperandPrime -> ''	OrOperandPrime -> && AndOperand OrOperandPrime																				
{new,!,-,(,ID,this,Integer,null,true,false}	{&&,||,;,],),,}	AndOperand		AndOperand -> EqualityOperand AndOperandPrime						AndOperand -> EqualityOperand AndOperandPrime																										AndOperand -> EqualityOperand AndOperandPrime			AndOperand -> EqualityOperand AndOperandPrime	AndOperand -> EqualityOperand AndOperandPrime	AndOperand -> EqualityOperand AndOperandPrime	AndOperand -> EqualityOperand AndOperandPrime	AndOperand -> EqualityOperand AndOperandPrime	AndOperand -> EqualityOperand AndOperandPrime	AndOperand -> EqualityOperand AndOperandPrime			
{==,!=,''}	{&&,||,;,],),,}	AndOperandPrime											AndOperandPrime -> ''	AndOperandPrime -> ''			AndOperandPrime -> ''		AndOperandPrime -> ''								AndOperandPrime -> ''	AndOperandPrime -> ''	AndOperandPrime -> == EqualityOperand AndOperandPrime	AndOperandPrime -> != EqualityOperand AndOperandPrime																		
{new,!,-,(,ID,this,Integer,null,true,false}	{==,!=,&&,||,;,],),,}	EqualityOperand		EqualityOperand -> RelOperand EqualityOperandPrime						EqualityOperand -> RelOperand EqualityOperandPrime																										EqualityOperand -> RelOperand EqualityOperandPrime			EqualityOperand -> RelOperand EqualityOperandPrime	EqualityOperand -> RelOperand EqualityOperandPrime	EqualityOperand -> RelOperand EqualityOperandPrime	EqualityOperand -> RelOperand EqualityOperandPrime	EqualityOperand -> RelOperand EqualityOperandPrime	EqualityOperand -> RelOperand EqualityOperandPrime	EqualityOperand -> RelOperand EqualityOperandPrime			
{<,<=,>=,>,''}	{==,!=,&&,||,;,],),,}	EqualityOperandPrime											EqualityOperandPrime -> ''	EqualityOperandPrime -> ''			EqualityOperandPrime -> ''		EqualityOperandPrime -> ''								EqualityOperandPrime -> ''	EqualityOperandPrime -> ''	EqualityOperandPrime -> ''	EqualityOperandPrime -> ''	EqualityOperandPrime -> < RelOperand EqualityOperandPrime	EqualityOperandPrime -> <= RelOperand EqualityOperandPrime	EqualityOperandPrime -> >= RelOperand EqualityOperandPrime	EqualityOperandPrime -> > RelOperand EqualityOperandPrime														
{new,!,-,(,ID,this,Integer,null,true,false}	{<,<=,>=,>,==,!=,&&,||,;,],),,}	RelOperand		RelOperand -> AddOperand RelOperandPrime						RelOperand -> AddOperand RelOperandPrime																										RelOperand -> AddOperand RelOperandPrime			RelOperand -> AddOperand RelOperandPrime	RelOperand -> AddOperand RelOperandPrime	RelOperand -> AddOperand RelOperandPrime	RelOperand -> AddOperand RelOperandPrime	RelOperand -> AddOperand RelOperandPrime	RelOperand -> AddOperand RelOperandPrime	RelOperand -> AddOperand RelOperandPrime			
{+,-,''}	{<,<=,>=,>,==,!=,&&,||,;,],),,}	RelOperandPrime											RelOperandPrime -> ''	RelOperandPrime -> ''			RelOperandPrime -> ''		RelOperandPrime -> ''								RelOperandPrime -> ''	RelOperandPrime -> ''	RelOperandPrime -> ''	RelOperandPrime -> ''	RelOperandPrime -> ''	RelOperandPrime -> ''	RelOperandPrime -> ''	RelOperandPrime -> ''	RelOperandPrime -> + AddOperand RelOperandPrime	RelOperandPrime -> - AddOperand RelOperandPrime												
{new,!,-,(,ID,this,Integer,null,true,false}	{+,-,<,<=,>=,>,==,!=,&&,||,;,],),,}	AddOperand		AddOperand -> Value AddOperandPrime						AddOperand -> Value AddOperandPrime																										AddOperand -> Value AddOperandPrime			AddOperand -> Value AddOperandPrime	AddOperand -> Value AddOperandPrime	AddOperand -> Value AddOperandPrime	AddOperand -> Value AddOperandPrime	AddOperand -> Value AddOperandPrime	AddOperand -> Value AddOperandPrime	AddOperand -> Value AddOperandPrime			
{*,/,''}	{+,-,<,<=,>=,>,==,!=,&&,||,;,],),,}	AddOperandPrime											AddOperandPrime -> ''	AddOperandPrime -> ''			AddOperandPrime -> ''		AddOperandPrime -> ''								AddOperandPrime -> ''	AddOperandPrime -> ''	AddOperandPrime -> ''	AddOperandPrime -> ''	AddOperandPrime -> ''	AddOperandPrime -> ''	AddOperandPrime -> ''	AddOperandPrime -> ''	AddOperandPrime -> ''	AddOperandPrime -> ''	AddOperandPrime -> * Value AddOperandPrime	AddOperandPrime -> / Value AddOperandPrime										
{new,!,-,(,ID,this,Integer,null,true,false}	{*,/,+,-,<,<=,>=,>,==,!=,&&,||,;,],),,}	Value		Value -> ID ValuePrime						Value -> ( Expr ) ValuePrime																										Value -> - Value			Value -> new NewWhat	Value -> ! Value	Value -> this ValuePrime	Value -> Integer	Value -> null	Value -> true	Value -> false			
{int,ID}	{*,/,+,-,<,<=,>=,>,==,!=,&&,||,;,],),,}	NewWhat		NewWhat -> ID ( ) ValuePrime																NewWhat -> int [ Expr ]																												
{.,[,''}	{*,/,+,-,<,<=,>=,>,==,!=,&&,||,;,],),,}	ValuePrime										ValuePrime -> [ Expr ] ValuePrime	ValuePrime -> ''	ValuePrime -> ''			ValuePrime -> ''		ValuePrime -> ''								ValuePrime -> ''	ValuePrime -> ''	ValuePrime -> ''	ValuePrime -> ''	ValuePrime -> ''	ValuePrime -> ''	ValuePrime -> ''	ValuePrime -> ''	ValuePrime -> ''	ValuePrime -> ''	ValuePrime -> ''	ValuePrime -> ''								ValuePrime -> . DotWhat		
{ID,length}	{*,/,+,-,<,<=,>=,>,==,!=,&&,||,;,],),,}	DotWhat		DotWhat -> ID ( ExprList ) ValuePrime																																											DotWhat -> length	
